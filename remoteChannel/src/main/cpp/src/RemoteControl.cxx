// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RemoteControl.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RemoteControl.h"
#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


RequestType::RequestType()
{

}

RequestType::~RequestType()
{
}

RequestType::RequestType(
        const RequestType& x)
{
    m_operation = x.m_operation;
    m_action = x.m_action;
}

RequestType::RequestType(
        RequestType&& x) noexcept
{
    m_operation = x.m_operation;
    m_action = std::move(x.m_action);
}

RequestType& RequestType::operator =(
        const RequestType& x)
{

    m_operation = x.m_operation;
    m_action = x.m_action;
    return *this;
}

RequestType& RequestType::operator =(
        RequestType&& x) noexcept
{

    m_operation = x.m_operation;
    m_action = std::move(x.m_action);
    return *this;
}

bool RequestType::operator ==(
        const RequestType& x) const
{
    return (m_operation == x.m_operation &&
           m_action == x.m_action);
}

bool RequestType::operator !=(
        const RequestType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member operation
 * @param _operation New value for member operation
 */
void RequestType::operation(
        OperationType _operation)
{
    m_operation = _operation;
}

/*!
 * @brief This function returns the value of member operation
 * @return Value of member operation
 */
OperationType RequestType::operation() const
{
    return m_operation;
}

/*!
 * @brief This function returns a reference to member operation
 * @return Reference to member operation
 */
OperationType& RequestType::operation()
{
    return m_operation;
}


/*!
 * @brief This function copies the value in member action
 * @param _action New value to be copied in member action
 */
void RequestType::action(
        const std::string& _action)
{
    m_action = _action;
}

/*!
 * @brief This function moves the value in member action
 * @param _action New value to be moved in member action
 */
void RequestType::action(
        std::string&& _action)
{
    m_action = std::move(_action);
}

/*!
 * @brief This function returns a constant reference to member action
 * @return Constant reference to member action
 */
const std::string& RequestType::action() const
{
    return m_action;
}

/*!
 * @brief This function returns a reference to member action
 * @return Reference to member action
 */
std::string& RequestType::action()
{
    return m_action;
}


ReplyType::ReplyType()
{

}

ReplyType::~ReplyType()
{
}

ReplyType::ReplyType(
        const ReplyType& x)
{
    m_reply = x.m_reply;
}

ReplyType::ReplyType(
        ReplyType&& x) noexcept
{
    m_reply = std::move(x.m_reply);
}

ReplyType& ReplyType::operator =(
        const ReplyType& x)
{

    m_reply = x.m_reply;
    return *this;
}

ReplyType& ReplyType::operator =(
        ReplyType&& x) noexcept
{

    m_reply = std::move(x.m_reply);
    return *this;
}

bool ReplyType::operator ==(
        const ReplyType& x) const
{
    return (m_reply == x.m_reply);
}

bool ReplyType::operator !=(
        const ReplyType& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member reply
 * @param _reply New value to be copied in member reply
 */
void ReplyType::reply(
        const std::string& _reply)
{
    m_reply = _reply;
}

/*!
 * @brief This function moves the value in member reply
 * @param _reply New value to be moved in member reply
 */
void ReplyType::reply(
        std::string&& _reply)
{
    m_reply = std::move(_reply);
}

/*!
 * @brief This function returns a constant reference to member reply
 * @return Constant reference to member reply
 */
const std::string& ReplyType::reply() const
{
    return m_reply;
}

/*!
 * @brief This function returns a reference to member reply
 * @return Reference to member reply
 */
std::string& ReplyType::reply()
{
    return m_reply;
}


// Include auxiliary functions like for serializing/deserializing.
#include "RemoteControlCdrAux.ipp"
